# Package ######################################################################

[build-system]
requires = ["setuptools >= 61.0.0"]
build-backend = "setuptools.build_meta"

[project]
name = "posggym"
description = "A standard API and diverse set of reference environments for reinforcement learning and planning in Partially Observable Stochastic Games (POSGs)."
readme = "README.md"
requires-python = ">= 3.8"
authors = [
	{ name = "Jonathon Schwartz", email = "jonathon.schwartz@anu.edu.au" },
]
license = { text = "MIT License" }
keywords = ["Reinforcement Learning", "Planning", "Game", "RL", "AI", "POSG"]
classifiers = [
	# change to `5 - Production/Stable` maybe one day
	"Development Status :: 4 - Beta",
	"License :: OSI Approved :: MIT License",
	"Programming Language :: Python :: 3",
	"Programming Language :: Python :: 3.8",
	"Programming Language :: Python :: 3.9",
	"Programming Language :: Python :: 3.10",
	"Programming Language :: Python :: 3.11",
	'Intended Audience :: Science/Research',
	'Topic :: Scientific/Engineering :: Artificial Intelligence',
]
dependencies = [
	"gymnasium >=0.26",
	"numpy >=1.21.0",
	"typing-extensions >=4.3.0",
	"importlib-metadata >=4.8.0; python_version < '3.10'",
]
dynamic = ["version"]

[project.optional-dependencies]
# Update dependencies in `all` if any are added or removed
grid-world = ["pygame >=2.0"]
continuous = ["pygame >=2.0", "pymunk >=6.0.0"]
envs-all = [
	# Dependencies for all environment types above
	# NOTE: No need to manually remove the duplicates, setuptools automatically does that.
	# grid-world
	"pygame >=2.0",
	# continuous
	"pygame >=2.0",
	"pymunk >=6.0.0",
]
agents = [
	"pygame >=2.0",
	"pymunk >=6.0.0",
	"types-requests >=2.28",
	"requests >= 2.28",
	"clint >= 0.5.1",
	"torch >=1.11.0",
	"pandas >=1.0",
	"prettytable >=3.6.0",
]
other = ["moviepy >=1.0.0"]
all = [
	# Dependencieis for all envs and agents
	# envs
	"pygame >=2.0",
	"pymunk>=6.0.0",
	# agents
	"types-requests >=2.28",
	"requests >= 2.28",
	"clint >= 0.5.1",
	"torch >=1.11.0",
	"pandas >=1.0",
	"prettytable >=3.6.0",
	# other
	"moviepy >=1.0.0",
]
testing = ["pytest >=7.2"]

[project.urls]
Homepage = "https://github.com/RDLLab/posggym"
Repository = "https://github.com/RDLLab/posggym/"
Documentation = "https://posggym.readthedocs.io/"
"Bug Report" = "https://github.com/RDLLab/posggym/issues"

[tool.setuptools]
include-package-data = true

[tool.setuptools.packages.find]
include = ["posggym", "posggym.*"]

[tool.setuptools.package-data]
posggym = ["envs/grid_world/img/*.png", "py.typed"]

# Linters and Test tools #######################################################
[tool.ruff]
# https://beta.ruff.rs/docs/settings/
src = ["posggym", "tests", "docs/scripts", "scripts", "examples", "notebooks"]
extend-select = ["C4", "SIM", "TCH"]
show-fixes = true
# Same as Black.
line-length = 88
# Assume Python 3.8.
target-version = "py38"

# Ignore `F401` (import violations) in all `__init__.py` files,
[tool.ruff.per-file-ignores]
"__init__.py" = ["F401", "E402"]

[tool.ruff.mccabe]
# Unlike Flake8, default to a complexity level of 10.
max-complexity = 10

[tool.ruff.isort]
lines-after-imports = 2
extra-standard-library = ["typing_extensions"]

[tool.black]
safe = true
line-length = 88

[tool.pyright]
include = ["posggym/**", "tests/**"]
exclude = ["**/node_modules", "**/__pycache__"]
strict = []

typeCheckingMode = "basic"
pythonVersion = "3.8"
pythonPlatform = "All"
enableTypeIgnoreComments = true

# This is required as the CI pre-commit does not download the module (i.e. numpy, pygame, box2d)
#   Therefore, we have to ignore missing imports
reportMissingImports = "none"
# Some modules are missing type stubs, which is an issue when running pyright locally
reportMissingTypeStubs = false
# For warning and error, will raise an error when
reportInvalidTypeVarUse = "none"

reportGeneralTypeIssues = "none" # -> commented out raises 489 errors
# reportUntypedFunctionDecorator = "none"  # -> pytest.mark.parameterize issues

reportPrivateUsage = "warning"
reportUnboundVariable = "warning"

[tool.pytest.ini_options]
filterwarnings = [
	# Tensorboard warnings
	"ignore::DeprecationWarning:tensorboard",
	# Gymnasium warnings
	"ignore::UserWarning:gymnasium",
	# PettingZoo warnings
	"ignore::UserWarning:pettingzoo",
]
