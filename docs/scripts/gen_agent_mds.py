"""Generates agent documentation Markdown files.

Copied and adapted from Gymnasium:
https://github.com/Farama-Foundation/Gymnasium/blob/v0.27.0/docs/scripts/gen_mds.py

"""
import re
from typing import Dict, List
from pathlib import Path

import posggym
import posggym.agents as pga
from posggym.agents.registration import PolicySpec
from tqdm import tqdm


agent_docs_dir = Path(__file__).resolve().parent.parent / "agents"

pattern = re.compile(r"(?<!^)(?=[A-Z])")

posggym.logger.set_level(posggym.logger.DISABLED)

all_agents = list(pga.registry.values())
# env_type -> env_name -> [PolicySpec]
filtered_agents_by_env_type: Dict[str, Dict[str, List[PolicySpec]]] = {}

# Obtain filtered list
for pi_spec in tqdm(all_agents):
    if pi_spec.env_id is None:
        if "generic" not in filtered_agents_by_env_type:
            filtered_agents_by_env_type["generic"] = {"generic": []}
        filtered_agents_by_env_type["generic"]["generic"].append(pi_spec)
        continue

    try:
        env_args = pi_spec.env_args or {}
        env = posggym.make(pi_spec.env_id, disable_env_checker=True, **env_args)

        env_spec = env.spec
        assert env_spec is not None, f"Env spec is None for {pi_spec.id}"

        # posggym.envs.env_type.env_name.EnvClass
        split = env_spec.entry_point.split(".")
        # ignore posggym.envs.env_type:Env
        if len(split) < 4:
            continue
        env_module = split[0]
        env_type = split[2]
        env_version = env_spec.version

        split = str(type(env.unwrapped)).split(".")
        env_name = split[3]

        if env_type not in filtered_agents_by_env_type:
            filtered_agents_by_env_type[env_type] = {}
        if env_name not in filtered_agents_by_env_type[env_type]:
            filtered_agents_by_env_type[env_type][env_name] = []

        filtered_agents_by_env_type[env_type][env_name].append(pi_spec)

    except Exception as e:
        print(e)


# Update Docs
for env_type, envs in tqdm(filtered_agents_by_env_type.items()):
    print("Env Type:", env_type)
    env_type_dir = agent_docs_dir / env_type.lower()

    if not env_type_dir.exists() and env_type != "generic":
        env_type_dir.mkdir(parents=True)

    env_type_title = env_type.replace("_", " ").title()

    for env_name, pi_spec_list in envs.items():
        print("  Env Name:", env_name)
        # pascal case
        pascal_env_name = env_name.split("-")[0]
        snake_env_name = pattern.sub("_", pascal_env_name).lower()
        title_env_name = snake_env_name.replace("_", " ").title()

        # path for environment .md
        if env_type == "generic":
            env_md_path = agent_docs_dir / (snake_env_name + ".md")
        else:
            env_md_path = env_type_dir / (snake_env_name + ".md")

        front_matter = f"""---
autogenerated:
title: {title_env_name}
---
"""
        title = f"# {title_env_name}"

        if env_type == "generic":
            info = (
                "These are generic policies that can be used for all or multiple "
                "environments."
            )
        else:
            info = (
                "These policies are for the "
                + f"<a href='../../../environments/{env_type}/{snake_env_name}'>"
                f"{title_env_name} environment</a>. Read environment page for detailed "
                "information about the environment."
            )

        all_text = f"""{front_matter}
{title}

{info}

"""

        # Map from env_args_id to list of PolicySpec
        filtered_agents_by_env_args_id = {}
        for pi_spec in pi_spec_list:
            env_args_id = pi_spec.env_args_id
            if env_args_id not in filtered_agents_by_env_args_id:
                filtered_agents_by_env_args_id[env_args_id] = []
            filtered_agents_by_env_args_id[env_args_id].append(pi_spec)

        env_args_ids = [k for k in filtered_agents_by_env_args_id if k is not None]
        env_args_ids.sort()

        if None in filtered_agents_by_env_args_id:
            env_args_ids = [None] + env_args_ids

        for env_args_id in env_args_ids:
            policy_specs = filtered_agents_by_env_args_id[env_args_id]

            # Code for making environment
            env_args = policy_specs[0].env_args
            if env_args is None:
                env_makes_str = f'env = posggym.make("{policy_specs[0].env_id}")'
            else:
                env_makes_str = [f'env = posggym.make(\n    "{policy_specs[0].env_id}"']
                for k, v in env_args.items():
                    if isinstance(v, str):
                        env_makes_str.append(f',\n    {k}="{v}"')
                    else:
                        env_makes_str.append(f",\n    {k}={v}")
                env_makes_str.append("\n)")
                env_makes_str = "".join(env_makes_str)

            env_makes_str = f"""```
{env_makes_str}
```
"""

            sorted(policy_specs, key=lambda x: x.policy_name)

            pi_table = (
                "| Policy | ID | Valid Agent IDs | Description |\n"
                "|---|---|---|---|\n"
            )
            for pi_spec in policy_specs:
                valid_agent_ids = (
                    f"`{pi_spec.valid_agent_ids}`" if pi_spec.valid_agent_ids else "All"
                )
                pi_table += (
                    f"| `{pi_spec.policy_name}` | "
                    f"`{pi_spec.id}` | "
                    f"{valid_agent_ids} |"
                    f" {pi_spec.description} |"
                    "\n"
                )

            if env_type == "generic":
                all_text += f"""
{pi_table}"""
                continue

            if env_args_id is None:
                env_args_id_title = """Generic
These policies can be used for any version of this environment.

"""
            else:
                env_args_id_title = f"{env_args_id}"

            all_text += f"""## {env_args_id_title}

{env_makes_str}

{pi_table}"""

        with open(env_md_path, "w", encoding="utf-8") as fp:
            fp.write(all_text)
