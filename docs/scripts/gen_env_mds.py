"""Generates environment documentation Markdown files.

Copied and adapted from Gymnasium:
https://github.com/Farama-Foundation/Gymnasium/blob/v0.27.0/docs/scripts/gen_mds.py

"""
__author__ = "Sander Schulhoff"
__email__ = "sanderschulhoff@gmail.com"

import re
from functools import reduce
from typing import Dict, List
from pathlib import Path
from tqdm import tqdm
from utils import kill_strs, trim

import posggym
from posggym.envs.registration import EnvSpec

pattern = re.compile(r"(?<!^)(?=[A-Z])")

posggym.logger.set_level(posggym.logger.DISABLED)

all_envs = list(posggym.envs.registry.values())
filtered_envs_by_type: Dict[str, Dict[str, EnvSpec]] = {}

# Obtain filtered list
for env_spec in tqdm(all_envs):
    if any(x in str(env_spec.id) for x in kill_strs):
        continue

    # posggym.envs.env_type.env.EnvClass
    split = env_spec.entry_point.split(".")
    # ignore posggym.envs.env_type:Env
    env_module = split[0]
    if len(split) < 4:
        continue
    env_type = split[2]
    env_version = env_spec.version

    # ignore unit test envs
    if env_type == "unittest":
        continue

    try:
        env = posggym.make(env_spec.id, disable_env_checker=True)
        split = str(type(env.unwrapped)).split(".")
        env_name = split[3]

        if env_type not in filtered_envs_by_type.keys():
            filtered_envs_by_type[env_type] = {}
        # only store new entries and higher versions
        if env_name not in filtered_envs_by_type[env_type] or (
            env_name in filtered_envs_by_type[env_type]
            and env_version > filtered_envs_by_type[env_type][env_name].version
        ):
            filtered_envs_by_type[env_type][env_name] = env_spec

    except Exception as e:
        print(e)

# Sort
filtered_envs: List = list(
    reduce(
        lambda s, x: s + x,  # type: ignore
        (
            sorted(arr, key=lambda x: x.name)
            for arr in (
                list(dic.values()) for dic in list(filtered_envs_by_type.values())
            )
        ),
        [],
    )
)


# Update Docs
for i, env_spec in tqdm(enumerate(filtered_envs)):
    print("ID:", env_spec.id)
    env_type = env_spec.entry_point.split(".")[2]
    try:
        env = posggym.make(env_spec.id, disable_env_checker=True)

        # variants dont get their own pages
        e_n = str(env_spec).lower()

        docstring = env.unwrapped.__doc__
        if not docstring:
            docstring = env.unwrapped.__class__.__doc__
        docstring = trim(docstring)

        # pascal case
        pascal_env_name = env_spec.id.split("-")[0]
        snake_env_name = pattern.sub("_", pascal_env_name).lower()
        title_env_name = snake_env_name.replace("_", " ").title()
        env_type_title = env_type.replace("_", " ").title()
        related_pages_meta = ""
        if i == 0 or env_type != filtered_envs[i - 1].entry_point.split(".")[2]:
            related_pages_meta = "firstpage:\n"
        elif (
            i == len(filtered_envs) - 1
            or env_type != filtered_envs[i + 1].entry_point.split(".")[2]
        ):
            related_pages_meta = "lastpage:\n"

        v_path = (
            Path(__file__).resolve().parent.parent
            / "environments"
            / env_type
            / (snake_env_name + ".md")
        )

        front_matter = f"""---
autogenerated:
title: {title_env_name}
{related_pages_meta}---
"""
        title = f"# {title_env_name}"

        if "rgb_array" in env.metadata["render_modes"]:
            gif = (
                "```{figure}"
                + f" ../../_static/videos/{env_type}/{snake_env_name}.gif"
                + f"\n:width: 200px\n:name: {snake_env_name}\n```"
            )
        else:
            gif = ""
        info = (
            "This environment is part of the "
            + f"<a href='..'>{env_type_title} environments</a>. "
            + "Please read that page first for general information."
        )

        act_spaces_str = str(env.action_spaces)
        act_spaces_str = act_spaces_str.replace("\n", " ")

        obs_spaces_str = str(env.observation_spaces)
        obs_spaces_str = obs_spaces_str.replace("\n", " ")

        env_table = "|   |   |\n|---|---|\n"
        env_table += f"| Possible Agents | {env.possible_agents} |\n"
        env_table += f"| Action Spaces | {act_spaces_str} |\n"
        env_table += f"| Observation Spaces | {obs_spaces_str} |\n"
        env_table += f"| Symmetric | {env.is_symmetric} |\n"

        # if env.observation_space.shape:
        #     env_table += f"| Observation Shape | {env.observation_space.shape} |\n"

        #     if hasattr(env.observation_space, "high"):
        #         high = env.observation_space.high

        #         if hasattr(high, "shape"):
        #             if len(high.shape) == 3:
        #                 high = high[0][0][0]
        #         if env_type == "mujoco":
        #             high = high[0]
        #         high = np.round(high, 2)
        #         high = str(high).replace("\n", " ")
        #         env_table += f"| Observation High | {high} |\n"

        #     if hasattr(env.observation_space, "low"):
        #         low = env.observation_space.low
        #         if hasattr(low, "shape"):
        #             if len(low.shape) == 3:
        #                 low = low[0][0][0]
        #         if env_type == "mujoco":
        #             low = low[0]
        #         low = np.round(low, 2)
        #         low = str(low).replace("\n", " ")
        #         env_table += f"| Observation Low | {low} |\n"
        # else:
        #     env_table += f"| Observation Space | {env.observation_space} |\n"

        env_table += f'| Import | `posggym.make("{env_spec.id}")` |\n'

        if docstring is None:
            docstring = "No information provided"
        all_text = f"""{front_matter}
{title}

{gif}

{info}

{env_table}

{docstring}
"""
        with open(v_path, "w", encoding="utf-8") as fp:
            fp.write(all_text)
    except Exception as e:
        print(e)
